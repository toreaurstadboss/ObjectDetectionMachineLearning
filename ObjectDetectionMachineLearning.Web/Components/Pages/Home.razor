@page "/"

<PageTitle>Home</PageTitle>

<h1>Object detection using Machine learning</h1>

<p>
    Upload an image to use the Object detection demo. The machine-learned ML.Net model will detect <em>Stop signs</em> and
    display bounding boxes around each stop sign in the image. The stop sign is trained to use those used as traffic signs in United States
    along streets and roads.
</p>

<div class="container">

    <div class="row align-items-start">
        <div class="col overflow-scroll">
            <label><b>Select a picture to run stop sign object detection</b></label><br />
            <InputFile OnChange="@OnInputFile" accept=".jpeg,.jpg,.png" />
            <br />
            <code class="alert-secondary">Supported file formats: .jpeg, .jpg and .png. Max image file upload size : 10 MB</code>
            <br />
        </div>
    </div>

    <div class="row align-items-start">
        <div class="col overflow-scroll">
            <label class="alert-info">Preview of the selected image</label>
            <div>
                <img id="PreviewImage" width="400" style="border:1px solid black;" src="@UploadedImagePreview" /><br />
            </div>
        </div>
        <div class="col overflow-scroll">
            <label class="alert-info">Image with bounding boxes</label>
            <canvas id="PreviewImageBbox" style="border:solid 1px black">
            </canvas>
            <br />
        </div>
    </div>

</div>

<script type="text/javascript">
  
    var colorPalette = [
        "red", "yellow", "blue", "green", "fuchsia",
        "moccasin", "purple", "magenta", "aliceblue",
        "lightyellow", "lightgreen"
    ];

 
function rescaleCanvas() {
    var img = document.getElementById('PreviewImage');
    var canvas = document.getElementById('PreviewImageBbox');

    // Get the displayed size (not natural/original size)
    var displayWidth = img.clientWidth;
    var displayHeight = img.clientHeight;

    // Set canvas size to match displayed image size
    canvas.width = displayWidth;
    canvas.height = displayHeight;
}

function LoadBoundingBoxes(objectDescriptions) {
    if (!objectDescriptions) {
        alert('No objects found in image.');
        return;
    }

 debugger

    var objectDesc = typeof objectDescriptions === "string"
        ? JSON.parse(objectDescriptions)
        : objectDescriptions;

    var canvas = document.getElementById('PreviewImageBbox');
    var img = document.getElementById('PreviewImage');
    var ctx = canvas.getContext('2d');

    // Get scaling factors
    var scaleX = canvas.width / img.naturalWidth;
    var scaleY = canvas.height / img.naturalHeight;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

    ctx.font = "10px Verdana";

    for (var i = 0; i < objectDesc.length; i++) {
        const obj = objectDesc[i];

        const x = obj.X * scaleX;
        const y = obj.Y * scaleY;
        const width = obj.Width * scaleX;
        const height = obj.Height * scaleY;

        ctx.beginPath();
        ctx.strokeStyle = "black";
        ctx.lineWidth = 1;
        ctx.fillText(obj.Name, x + width / 2, y + height / 2);
        ctx.fillText("Confidence: " + obj.Confidence, x + width / 2, 10 + y + height / 2);
    }

    for (var i = 0; i < objectDesc.length; i++) {
        const obj = objectDesc[i];

        const x = obj.X * scaleX;
        const y = obj.Y * scaleY;
        const width = obj.Width * scaleX;
        const height = obj.Height * scaleY;

        ctx.fillStyle = getColor();
        ctx.globalAlpha = 0.2;
        ctx.fillRect(x, y, width, height);

        ctx.globalAlpha = 1.0;
        ctx.lineWidth = 3;
        ctx.strokeStyle = "blue";
        ctx.strokeRect(x, y, width, height);

        ctx.fillStyle = "black";
        ctx.fillText("Color: " + getColor(), x + width / 2, 20 + y + height / 2);
    }

    console.log('Bounding boxes:', objectDesc);
   // ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

}

    function getColor() {
        var colorIndex = Math.floor(Math.random() * colorPalette.length);
        return colorPalette[colorIndex];
    }

    function LoadBoundingBoxes(objectDescriptions) {
        if (!objectDescriptions) {
            alert('No objects found in image.');
            return;
        }

        //debugger

        var objectDesc = typeof objectDescriptions === "string"
            ? JSON.parse(objectDescriptions)
            : objectDescriptions;

        rescaleCanvas();

        var canvas = document.getElementById('PreviewImageBbox');
        var img = document.getElementById('PreviewImage');
        var ctx = canvas.getContext('2d');

        // Draw the image first
        ctx.drawImage(img, 0, 0);

        ctx.font = "10px Verdana";

        for (var i = 0; i < objectDesc.length; i++) {
            const obj = objectDesc[i];

            // Draw label and confidence
            ctx.beginPath();
            ctx.strokeStyle = "black";
            ctx.lineWidth = 1;
            ctx.fillText(obj.Name, obj.X + obj.Width / 2, obj.Y + obj.Height / 2);
            ctx.fillText("Confidence: " + obj.Confidence, obj.X + obj.Width / 2, 10 + obj.Y + obj.Height / 2);
        }

        for (var i = 0; i < objectDesc.length; i++) {
            const obj = objectDesc[i];

            ctx.fillStyle = getColor();
            ctx.globalAlpha = 0.2;
            ctx.fillRect(obj.X, obj.Y, obj.Width, obj.Height);

            ctx.globalAlpha = 1.0;
            ctx.lineWidth = 3;
            ctx.strokeStyle = "blue";
            ctx.strokeRect(obj.X, obj.Y, obj.Width, obj.Height);

            ctx.fillStyle = "black";
            ctx.fillText("Color: " + getColor(), obj.X + obj.Width / 2, 20 + obj.Y + obj.Height / 2);
        }

        g.drawImage(img, 0, 0);

        console.log('Bounding boxes:', objectDesc);
    }
</script>

