@page "/"


<PageTitle>Home</PageTitle>

<h1>Object detection using Machine learning</h1>

<p>
    Upload an image to use the Object detection demo. The machine-learned ML.Net model will detect <em>Stop signs</em> and
    display bounding boxes around each stop sign in the image. The stop sign is trained to use those used as traffic signs in United States
    along streets and roads.
</p>

<div class="container">

    <div class="row align-items-start">
        <div class="col overflow-scroll">
            <label><b>Select a picture to run stop sign object detection</b></label><br />
            <InputFile OnChange="@OnInputFile" accept=".jpeg,.jpg,.png" />
            <br />
            <code class="alert-secondary">Supported file formats: .jpeg, .jpg and .png. Max image file upload size : 10 MB</code>
            <br />
        </div>
    </div>

    <div class="row align-items-start">
        <div class="col overflow-scroll">
            <label class="alert-info">Preview of the selected image</label>
            <div>
                <img id="PreviewImage" style="min-width:200px;min-height:200px;border:1px solid black;" src="@UploadedImagePreview" onload="rescaleCanvas()" /><br />
            </div>
        </div>
        <div class="col overflow-scroll">
            <label class="alert-info">Image with bounding boxes</label>
            <canvas id="PreviewImageBbox" style="border:solid 1px black">
            </canvas>
            <br />
        </div>
    </div>

</div>


<script type="text/javascript">

    var colorPalette = ["red", "yellow", "blue", "green", "fuchsia", "moccasin", "purple", "magenta", "aliceblue", "lightyellow", "lightgreen"];

    function rescaleCanvas() {
        var img = document.getElementById('PreviewImage');
        var canvas = document.getElementById('PreviewImageBbox');
        canvas.width = img.naturalWidth;
        canvas.height = img.naturalHeight;
    }

    function getColor() {
        var colorIndex = parseInt(Math.random() * 10);
        var color = colorPalette[colorIndex];
        return color;
    }

    function LoadBoundingBoxes(objectDescriptions) {
        debugger
        if (objectDescriptions == null || objectDescriptions == false) {
            alert('did not find any objects in image. returning from calling load bounding boxes : ' + objectDescriptions);
            return;
        }

        var objectDesc = JSON.parse(objectDescriptions); //no need to parse js object again here, since it is already Js object (JSON.parse call is now removed)
        //alert('calling load bounding boxes, starting analysis on clientside js : ' + objectDescriptions);

        rescaleCanvas();
        var canvas = document.getElementById('PreviewImageBbox');
        var img = document.getElementById('PreviewImage');

        var ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);

        ctx.font = "10px Verdana";

        for (var i = 0; i < objectDesc.length; i++) {
            ctx.beginPath();
            ctx.strokeStyle = "black";
            ctx.lineWidth = 1;
            ctx.fillText(objectDesc[i].Name, objectDesc[i].X + objectDesc[i].Width / 2, objectDesc[i].Y + objectDesc[i].Height / 2);
            ctx.fillText("Confidence: " + objectDesc[i].Confidence, objectDesc[i].X + objectDesc[i].Width / 2, 10 + objectDesc[i].Y + objectDesc[i].Height / 2);
        }

        for (var i = 0; i < objectDesc.length; i++) {
            ctx.fillStyle = getColor();
            ctx.globalAlpha = 0.2;
            ctx.fillRect(objectDesc[i].X, objectDesc[i].Y, objectDesc[i].Width, objectDesc[i].Height);
            ctx.lineWidth = 3;
            ctx.strokeStyle = "blue";
            ctx.rect(objectDesc[i].X, objectDesc[i].Y, objectDesc[i].Width, objectDesc[i].Height);
            ctx.fillStyle = "black";
            ctx.fillText("Color: " + getColor(), objectDesc[i].X + objectDesc[i].Width / 2, 20 + objectDesc[i].Y + objectDesc[i].Height / 2);

            ctx.stroke();
        }

        ctx.drawImage(img, 0, 0);


        console.log('got these object descriptions:');
        console.log(objectDescriptions);

    }
</script>
